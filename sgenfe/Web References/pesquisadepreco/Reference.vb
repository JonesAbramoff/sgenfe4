'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.42000
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Este código-fonte foi gerado automaticamente por Microsoft.VSDesigner, Versão 4.0.30319.42000.
'
Namespace pesquisadepreco
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IntegracaoLojistaSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class IntegracaoLojista
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private FuncaoGenerica2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FuncaoGenericaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.sgenfe4.My.MySettings.Default.sgenfe_pesquisadepreco_IntegracaoLojista
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event FuncaoGenerica2Completed As FuncaoGenerica2CompletedEventHandler
        
        '''<remarks/>
        Public Event FuncaoGenericaCompleted As FuncaoGenericaCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FuncaoGenerica2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FuncaoGenerica2(ByVal IDVersao As String, ByVal NomeFuncao As String, ByVal xmlEntrada As String, ByRef xmlSaida As String, ByRef StringErro As String, ByVal Ambiente As String, ByVal EmailLojista As String, ByVal SenhaLojista As String) As Long
            Dim results() As Object = Me.Invoke("FuncaoGenerica2", New Object() {IDVersao, NomeFuncao, xmlEntrada, xmlSaida, StringErro, Ambiente, EmailLojista, SenhaLojista})
            xmlSaida = CType(results(1),String)
            StringErro = CType(results(2),String)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FuncaoGenerica2Async(ByVal IDVersao As String, ByVal NomeFuncao As String, ByVal xmlEntrada As String, ByVal xmlSaida As String, ByVal StringErro As String, ByVal Ambiente As String, ByVal EmailLojista As String, ByVal SenhaLojista As String)
            Me.FuncaoGenerica2Async(IDVersao, NomeFuncao, xmlEntrada, xmlSaida, StringErro, Ambiente, EmailLojista, SenhaLojista, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FuncaoGenerica2Async(ByVal IDVersao As String, ByVal NomeFuncao As String, ByVal xmlEntrada As String, ByVal xmlSaida As String, ByVal StringErro As String, ByVal Ambiente As String, ByVal EmailLojista As String, ByVal SenhaLojista As String, ByVal userState As Object)
            If (Me.FuncaoGenerica2OperationCompleted Is Nothing) Then
                Me.FuncaoGenerica2OperationCompleted = AddressOf Me.OnFuncaoGenerica2OperationCompleted
            End If
            Me.InvokeAsync("FuncaoGenerica2", New Object() {IDVersao, NomeFuncao, xmlEntrada, xmlSaida, StringErro, Ambiente, EmailLojista, SenhaLojista}, Me.FuncaoGenerica2OperationCompleted, userState)
        End Sub
        
        Private Sub OnFuncaoGenerica2OperationCompleted(ByVal arg As Object)
            If (Not (Me.FuncaoGenerica2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FuncaoGenerica2Completed(Me, New FuncaoGenerica2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FuncaoGenerica", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FuncaoGenerica(ByVal IDVersao As String, ByVal NomeFuncao As String, ByVal xmlEntrada As String, ByRef xmlSaida As String, ByRef StringErro As String) As Long
            Dim results() As Object = Me.Invoke("FuncaoGenerica", New Object() {IDVersao, NomeFuncao, xmlEntrada, xmlSaida, StringErro})
            xmlSaida = CType(results(1),String)
            StringErro = CType(results(2),String)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FuncaoGenericaAsync(ByVal IDVersao As String, ByVal NomeFuncao As String, ByVal xmlEntrada As String, ByVal xmlSaida As String, ByVal StringErro As String)
            Me.FuncaoGenericaAsync(IDVersao, NomeFuncao, xmlEntrada, xmlSaida, StringErro, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FuncaoGenericaAsync(ByVal IDVersao As String, ByVal NomeFuncao As String, ByVal xmlEntrada As String, ByVal xmlSaida As String, ByVal StringErro As String, ByVal userState As Object)
            If (Me.FuncaoGenericaOperationCompleted Is Nothing) Then
                Me.FuncaoGenericaOperationCompleted = AddressOf Me.OnFuncaoGenericaOperationCompleted
            End If
            Me.InvokeAsync("FuncaoGenerica", New Object() {IDVersao, NomeFuncao, xmlEntrada, xmlSaida, StringErro}, Me.FuncaoGenericaOperationCompleted, userState)
        End Sub
        
        Private Sub OnFuncaoGenericaOperationCompleted(ByVal arg As Object)
            If (Not (Me.FuncaoGenericaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FuncaoGenericaCompleted(Me, New FuncaoGenericaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub FuncaoGenerica2CompletedEventHandler(ByVal sender As Object, ByVal e As FuncaoGenerica2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FuncaoGenerica2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlSaida() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property StringErro() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub FuncaoGenericaCompletedEventHandler(ByVal sender As Object, ByVal e As FuncaoGenericaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FuncaoGenericaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlSaida() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property StringErro() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
